-----------------------------------------------------------------------------------------
---------------------------------------Day 1 ----------------------------------------------
[From Slide - 1_0_NoSQL.pptx]
1. Need for NoSQL (Example of different actions one do in facebook)
2. Catalog of NoSQL databases - Key/Value, Columnar, Document, Graph
2.a Pros and cons of each NoSQL category, when to use and when not to use
[From document - 1_21_ColumnDatabaseVsRowDatabase.pdf]
2.b Columnar database vs Row-Relational DB

[From Slide - 1_1_DocumentDatabases.ppt]
3. Document database in detail

[From Slide - 2_OrientDB.pptx]
4. OrientDB introduction 
5. Setup 

--Connect to server
connect remote:localhost:2424 root root

--Create db from console
--Alternatively, Create db from login screen of web console
create database remote:localhost:2424/testdb root root plocal DOCUMENT;

-- Connect db from console
connect remote:localhost:2424/northwind root root

create class region
--to list classes
classes
--to list clusters
clusters
insert into region (name, country) values ('Bangalore', 'India')
select from region
--create properties for constraints
create property region.name string
 
-- type conversion during insert
insert into region (name, country) values (123, 'India')

-- type conversion error due to wrong format
create property region.rank integer
--following will throw an error
insert into region (name, country,zipcode,rank) values ('Bangalore', 'India','560047','gldfgjerihlj')

-- to show list of properties in a class
desc region

-- when you add a property to class when documents in that class already have a value for the same field name
-- orientdb checks if that values present in the documents for the field conform to the schema. Throws an error if it doesnt
create property region.country string

-- to create an index on a property in a class 
-- remember this can be done only on a property defined on a class 
-- so schema is required to create an index
create index region.country NOTUNIQUE

-- to delete a property not defined in schema
update Customer remove livesin  

-- to delete a property defined in schema. This will not delete property from documents
drop property region.rank

-- delete records / documents based on record id. # prefix is optional
delete from region where @RID=#12:2 or @RID=12:3

--add field to existing documents
update Customer set reg_name = 'Bangalore'

--if you have imported records from database where foreign key values are already present in rows, then create a link based on these values. following command will create a new property "livesin" of type LINK
create link livesin type link from Customer.reg_name to region.name

--to find references to a record
select expand(referredBy) from (find references #12:0)

--Instead of creating a link based on existing values, create a link in the schema
create property Customer.region LINK region

--update document with link property
update Customer set region=#12:0

--to create an embedded property (instead of a link) in a class
--You should already have the class called Address
--Use EMBEDDEDLIST in case customer can have multiple address
create property Customer.address EMBEDDED Address

--Insert document 
insert into Customer set name='British Telecom', reg_name='Calcutta', address={line1:'fsgrg',city:'Erode',zipcode:560047}
-----------------------------------------------------------------------------------------
---------------------------------------Day 2 ----------------------------------------------
--OrientDB document model Case study: Northwind database using SQL interface of OrientdB

create class region
create class customer
create class country
create class employee
create class order
create class item
create class product
create class category

create property region.code string
create property region.details string

create property country.code string
create property country.name string

create property customer.id string
create property customer.name string
create property customer.livesInRegion link region
create property customer.livesInCountry link country

create property employee.id string
create property employee.name string
create property employee.reportsTo link employee

create property order.orderNo string
create property order.orderDate date

create property category.id string
create property category.name string

create property product.id string
create property product.name string
create property product.inCategory link category
create property product.price float

create property item.quantity integer
create property item.sno integer
create property item.is link product
create property item.price float

create property order.lineitems linkset item

insert into country set code ="IN", name="India"
insert into region set code="KA", name="Karnataka"
insert into region set code="TN", name="TamilNadu"

insert into customer set id="BT", name="BritishTelecom", livesInRegion=#9:0, livesInCountry=#11:0
insert into customer set id="TCS", name="TataCons Services", livesInRegion=#9:1, livesInCountry=#11:0

insert into employee set id="1000000", name="Krish"
insert into employee set id="1000001", name="Arun", reportsTo=#12:0
insert into employee set id="1000002", name="Ram", reportsTo=#12:0
insert into employee set id="1000003", name="Abhi"
update employee set reportsTo=(select @RID from employee where id="1000000") where id="1000003"

-- Implement the remaining set of classes and documents viz. product, category, item, order and their links through Java API of OrientDB
1. Create a maven project with orientdb-client dependency
2. Refer to hands-on project class App (creating product and category and their relationships), AppOrders  (creating Line items and orders)
3. Then executing SQL queries to fetch and iterate through documents and properties. Also prepared statement passing named parameters

-------- GRAPH DATABASES
1. Understand basic concepts in graph databases. Why graph databases, what are the applications of graph databases. Refer to slides in 3_ApacheCon2015TinkerPop3.pdf until 2 section that details Tinkerpop3

2. Overview of OrientDB Graph model using SQL interface

3. OrientDB Graph model Case study: Northwind database using SQL interface of OrientdB

create class region extends V
create class customer extends V
create class country extends V
create class employee extends V
create class order extends V
create class item extends V
create class product extends V
create class category extends V

create class livesInRegion extends E
create class livesInCountry extends E

create property region.code string
create property region.details string

create property country.code string
create property country.name string

create property customer.id string
create property customer.name string

insert into country set code ="IN", name="India"
insert into region set code="KA", name="Karnataka"
insert into region set code="TN", name="TamilNadu"

insert into customer set id="BT", name="BritishTelecom"
create edge livesInRegion from (select from customer where id="BT") to (select from region where code="KA") set since=2011

insert into customer set id="TCS", name="TataCons Services"
create edge livesInRegion from (select from customer where id="TCS") to (select from region where code="TN") set since=2000
create edge livesInCountry from (select from customer) to (select from country where code="IN")

-----------------------------------------------------------------------------------------
---------------------------------------Day 3 ----------------------------------------------
--------- Continuation of case study using orientdb graph model

create property employee.id string
create property employee.name string

create property order.orderNo string
create property order.orderDate date

create property category.id string
create property category.name string

create property product.id string
create property product.name string
create property product.price float

create property item.quantity integer
create property item.sno integer
create property item.price float

insert into employee set id="1000000", name="Krish"
insert into employee set id="1000001", name="Arun"
insert into employee set id="1000002", name="Ram"
insert into employee set id="1000003", name="Abhi"
create edge reportsTo from (select from employee where id<>"1000000") to (select from employee where id="1000000") 

create vertex category set categoryId="mobile", name="mobile phones"
create vertex category set categoryId="smartPhone", name="smart phone"

create vertex product set prodId="MOB001", name="Nokia 2210"
create vertex product set prodId="MOB002", name="Samsung"

create class inCategory extends E
create property inCategory.in LINK category
create property inCategory.out LINK product

create edge inCategory from (select from product where prodId="MOB001") to (select from category where categoryId="mobile") 
create edge inCategory from (select from product where prodId="MOB002") to (select from category where categoryId="smartPhone") 

create vertex item set sno=1, price=100, quantity=2
create vertex item set sno=2, price=1000, quantity=1
create class itemIs extends E
create edge itemIs from (select from item where sno=1) to (select from product where prodId="MOB001")
create edge itemIs from (select from item where sno=2) to (select from product where prodId="MOB002")

create vertex order set orderNo="M0001", orderDate="2016-03-03 00:00:00"
create class ordered extends E
create class orderDetails extends E
create class sold extends E
create edge ordered from (select from customer where id="BT") to (select from order where orderNo="M0001")
create edge orderDetails from (select from order where orderNo="M0001") to (select from item)
create edge sold from (select from employee where id="1000002") to (select from order)

--- Overview of OrientDB hooks and event listener. How to write hooks to log details in document to a file system

------------------------- Graph Traversals using OrientDB SQL interface for graphs
--To find out products ordered by a customer
select expand(out("ordered").out("orderDetails").out("itemIs")) from customer where  id="BT"

--To find out customeres who have ordered a product
select expand(in("itemIs").in("orderDetails").in ("ordered")) from product where prodId="MOB002"

--by default orientdb doesnt allow to create a property with name "id" as it internally uses Tinkerpop API which puts the constraint. one can disable it with following command.

alter database custom standardElementConstraints=false
-- you can disable it on the OrientGraph or on OrientGraphFactory setting setStandardElementConstraints(false)

Youtube reference video on OrientDB along with detailed blog
https://www.youtube.com/watch?v=X-pXqvVTK6E

Questions
1. When the property is an array, what is the value shown in square brackets [1], [2]
[Ans:] Whatever is shown in the square brackets is the size of the array / list. If the field contains 1 value then it shows it as [1]. If the field contains 2 values then it shows as [2]. Consider following example

create class parent
create class child
create property parent.name string
create property child.name string
create property parent.children LINKSET child
insert into child set name='A'
insert into child set name='B'
insert into child set name='C'
create property parent.skills embeddedset string
insert into parent set name='P1', skills=['java','javascript','android'], children=[#29:0, #29:1, #29:2]

====> select from parent
this should have [3], [3] for both skills and children properties

insert into parent set name='P2', skills=['java','javascript'], children=[#29:0, #29:1]
====> select from parent
this should have [2], [2] for both skills and children properties

insert into parent set name='P2', skills=['java','javascript'], children=[#29:0, #29:1,#29:2]
====> select from parent
this should have [2], [3] respectively for skills and children

2. refering to document as part of insert to link them
[Ans:] Insert supports subqueries through which you can assign values from other document to fields in the new document. For this scenario, let us consider the following example based on the above example. This command inserts children links from an existing parent document.

insert into parent set name='P4', skills=(select skills from parent where name='P1'), children=(select children from parent where name='P1')

3. Restrictions on edges start / end type
[Ans:] In our northwind database, the edge inCategory is allowed only from product class to category class. To include this constraint / validation as part of the schema, we need to execute the following commands to create links of specific types.

create property inCategory.in LINK category
create property inCategory.out LINK product

-----------------------------------------------------------------------
1. Overview of Tinkerpop3 API, various components and their roles- Refer to slides in 3_ApacheCon2015TinkerPop3.pdf from 2 nd section that details Tinkerpop3

2. Gremlin shell / console - overview
3. Overview of Groovy and Java API
4. Overview of Gremlin structure - creation of vertex and edges and querying them

graph = TinkerGraph.open()
gremlin = graph.addVertex(label,'software','name','gremlin')
gremlin.property('created',2009)
blueprints = graph.addVertex(label,'software','name','blueprints')
gremlin.addEdge('dependsOn',blueprints)
blueprints.property('created',2010)
blueprints.property('created').remove()
gremlin.addEdge('encapsulates',blueprints)
blueprints.remove()
gremlin.remove()

5. Overview of Gremlin Process / traversal, creating traversal source 
graph=TinkerGraph.open()
c1=graph.addVertex(label, 'country', 'code','IN','name','India')
r1=graph.addVertex(label, 'region', 'code','KA','name','Bangalore')
r2=graph.addVertex(label, 'region', 'code','TN','name','Chennai')
customer1=graph.addVertex(label, 'customer', 'cusId','BT','name','British Telecom')
order = graph.addVertex(label,'order','orderNo',1,'orderDate','2016-03-03')
customer1.addEdge('livesInCountry', c1)
customer1.addEdge('livesInRegion', r1)
customer1.addEdge('ordered', order)

--create traversal source
g=graph.traversal(standard())

-- create traverser either by using g.V() or g.V(v1, v2, ....) or g.E() or g.E(e1, e2, ...)
--Many function in traverser returns traverser thereby providing function composition

-- get order number of orders placed by customers living in India
g.V().hasLabel('country').has('code', 'IN').in('livesInCountry').out('ordered').values('orderNo')

-- get complete order details of orders placed by customers living in India
g.V().hasLabel('country').has('code', 'IN').in('livesInCountry').out('ordered').properties()

6. Setting up Gephi for visualization. Refer to gephiSetup.txt
7. Importing Northwind graphdb as mentioned in www.sql2gremlin.com

----------------------------------------------------------------------------------------------------
-------------------------------------------Day4----------------------------------------------------
Write plugin and bundle it as jar and place it in lib folder. Use ODocument API to make any modification. Validation and throw exception using triggers of type BEFORE*
http://orientdb.com/docs/2.0/orientdb.wiki/Java-Hooks.html

To register hooks during run time after the connection is made, use dynamic hooks. Implement an interface and register with database
http://orientdb.com/docs/2.0/orientdb.wiki/Dynamic-Hooks.html

Tinkerpop3 - Java API overview
1. Import maven project labs/tinkerpop. 
If you want to use orientdb with tinkerpop3, the development is 
Remove dependency on orientdb and the source code dependent on orientdb. 

To integrate Tinkerpop3 with orientdb - use SNAPSHOT version from github. This supports only gremlin structure.
https://github.com/mpollmeier/orientdb-gremlin

2. Understand gremlin structure - to add, update, delete, find by id - the graph elements - Vertex and Edge

3. Understand gremlin process - traversal. Understand different types of steps - map, branch, filter, flatmap, sideeffect. Go through Java API for each one of them using Lambda expression.

4. Hands-on with a suite of steps in different categories given as part of Tinkerpop3 library. Refer to labs/traversal project.

5. Compare and contrast traversal in RDBMS using joins and BTrees with graph traversal. Refer to whitepaper guides/Gremlin_Rodriguez.pdf

6. Walkthrough of traversals prsented in sql2gremlin.com

Walkthrough of traversal example using Java API presented in
http://www.programcreek.com/java-api-examples/index.php?api=org.apache.tinkerpop.gremlin.process.traversal.dsl.graph.GraphTraversal

7. Overview of Gremlin server, how to setup an initializing groovy script to bootstrap the server with graph db. Connecting to gremlin server from console as well as from the program using Cluster API. Setting up client side configuration through yaml file. Using JSON to integrate with Gremlin server.

8. Overview of fetching strategies in orient db. Different patterns to be used to specify fetching strategy - the levels, depth, field set. How to specify custom fetch plan as part of user query in Java API.
